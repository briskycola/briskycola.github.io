{"title":"How To Setup QEMU/Virt Manager On Linux","markdown":{"yaml":{"title":"How To Setup QEMU/Virt Manager On Linux","author":"Santiago Torres","date":"2025-04-07","toc":true,"title-block-banner":true},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n![](qemu.png)\n\nSometimes, we find ourselves needing to use a different operating system\nto accomplish a certain task. For example, you are using Linux and you\nneed to run a program designed for Windows, and the program cannot\nrun under a compatibility layer like WINE. Previously on Linux,\nfor these kinds of scenarios, Virtualbox was used to create virtual\nmachines to run these programs, and while Virtualbox is a great program,\nit's quite slow in comparison to QEMU with KVM. In my experience, QEMU\nwith KVM acceleration has given me the best performance compared to other\nsoftware. This guide will show you in detail how to use QEMU along with\nVirt Manager to make virtual machines with near-native performance.\n\n## Prerequisites\nYou must have virtualization enabled in your BIOS. This is usually enabled\nby default but if you want to check, you can run the following command:\n```bash\nlscpu | grep Virtualization\n```\n\nIf you have an Intel CPU, it should say `VT-x` and on an AMD CPU, it\nshould say `AMD-V`. If you don't see anything. You will have to go into\nyour BIOS and enable it yourself. If you have an Intel motherboard, you\nshould enable `VT-x` and if you have an AMD motherboard, you should\nenable `AMD-V`. Consult your PC manufacturer or motherboard manual for\nfurther instructions.\n\n\n## Installation\nIt is time to install QEMU along with Virt Manager onto your system. Install\nthe following packages using your distribution's package manager.\n\nArch Linux\n```bash\nsudo pacman -S qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat libguestfs\n```\n\nDebian/Ubuntu\n```bash\nsudo apt install qemu-system virt-manager libvirt-daemon dnsmasq vde2 bridge-utils netcat-openbsd libguestfs-tools\n```\n\nFedora\n```bash\nsudo dnf install @virtualization\n```\n\n#### Non-systemd distributions\nIf you are using a distribution that does not use systemd, you must\ninstall the libvirt daemon package that corresponds to your init system.\nFor example, on an Artix Linux system with OpenRC, you must install\n`libvirt-openrc`.\n\n## Modify configuration files\nBefore we start creating virtual machines, we need to make sure that\nthe user has sufficient permissions to use KVM. To do this, we first\nneed to uncomment the following lines in `/etc/libvirt/libvirtd.conf`\n\n```bash\nunix_sock_group = \"libvirt\"\nunix_sock_ro_perms = \"0777\"\nunix_sock_rw_perms = \"0770\"\n```\n\nAfter making those changes, your user must be part of the libvirt group,\nrun the following command to make the changes:\n\n```bash\nsudo usermod -aG libvirt $(whoami)\n```\n\nIf you are using a Debian/Ubuntu based distribution, you may need to add\nyour user to the kvm group: run the following command to make the changes:\n\n```bash\nsudo usermod -aG kvm $(whoami)\n```\n\nNow we must enable the libvirtd service itself. On most distributions,\nyou can enable the service on startup using systemd:\n\n```bash\nsudo systemctl enable libvirtd\n```\n\nIf you are using a distribution that does not use systemd, you must enable\nthe service using your distribution's init system.\n\nAt this point, you must restart your system for the changes to be applied.\n\n## Setting up the virtual machine\nOpen Virt Manager and wait for QEMU/KVM to connect. Before we\nbegin creating a virtual machine, we first must make sure that the\nvirtual network adapter is working. To check this, click on **QEMU/KVM**,\nthen go to **Edit** -> **Connection Details** -> **Virtual Networks** and\nclick the play button to enable the virtual network adapter. Also make sure\nto check **On Boot** to ensure that the adapter is always started.\n\nNow we can begin the process of creating a virtual machine. Go to\n**File** -> **New Virtual Machine**. Make sure local install media\nis selected and click forward.\n\nYou will then be prompted to select an ISO image. Go to **Browse** ->\n**Browse Local** and locate your ISO image. Most of the time, it will\nautomatically detect the OS. If it doesn't, you will have to manually\nselect the OS.\n\nAfter that, you'll be asked to allocate RAM and CPUs to the VM.\nThe general rule for allocating RAM is to never go above 50% of your\ntotal RAM (Ex: if you have 16GB of RAM, you can allocate at most 8GB).\nIgnore the number of CPUs for now, we will configure that later.\n\nThe next step is to configure your storage. You can configure this\nhowever you want.\n\nNow you will get a message to confirm the VM settings. We are not\ndone with the configuration just yet. We are going to change some\nof the VM settings. Make sure to check\n**Customize configuration before install** and click **Finish**.\n\n## Customizing virtual machine settings\n\n#### Changing firmware to UEFI\nWe will start with changing the firmware settings. I personally like\nto set the firmware to UEFI because every modern computer uses UEFI\nand many operating systems expect UEFI. This change is optional\nunless your guest OS requires UEFI.\n\n#### Modifying CPU topology\nThe next setting we will change is the CPU. The reason we didn't\nallocate CPU cores ahead of time is because for some reason,\nVirt Manager allocates sockets instead of cores and threads.\nIn other words, the guest OS will think there are multiple physical\nCPUs. We will modify the topology to allocate cores and threads\ninstead. Similar to allocating RAM, do not go above 50% of your total\nCPU threads. To view the total threads allocated, look at\n**vCPU allocation**\n\n#### Changing disk interface\nNext we will change the disk interface. The **VirtIO** interface\nis recommended as it is a paravirtualized interface, which\nmakes it faster compared to using the emulated SATA interface.\n\n#### Selecting graphics adapter\nThere are two options for the graphics adapter. You can use\neither Virtio or QXL. Virtio has 3D acceleration and QXL only\nhas 2D acceleration. You can use the driver that works\nbest with your use case.\n\n#### Adding a second CD/DVD Drive (Windows Guests Only)\nWindows does not come with VirtIO drivers. Because of this,\nwe need to install the drivers manually during Windows setup.\nThe virtio drivers for Windows can be found\n[here](https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md).\nTo add a second CD/DVD drive, go to **Add Hardware** -> **Storage**\n-> change device type to **CDROM device** -> click **Manage**\nand locate the VirtIO drivers.\n\n#### Adding a TPM Module (Windows 11 Guests Only)\nWindows 11 requires a TPM Module in order to be installed.\nThankfully, you can emulate a TPM using `swtpm`. Use\nyour distribution's package manager to install `swtpm`.\nTo add the TPM to the VM, go to **Add Hardware** ->\n**TPM** -> and use the default settings.\n\n## Installing the operating system\nNow you can click **Begin Installation** and from here,\ninstall the OS as you would on a physical computer. I'm\ninstalling Windows Server 2022.\n![windows-setup](windows_setup.png)\n\n#### Installing VirtIO drivers (Windows Guests Only)\nEarlier I mentioned that we needed to add a second CD/DVD\ndrive for the VirtIO drivers. You may have noticed that\nWindows didn't detect the disk. This is where the second\nCD/DVD drive comes in. To install the drivers, go to\n**Load Driver** -> **Ok** and you will get a list of\navailable drivers. Install the driver that cooresponds to\nyour version of Windows. From here you can continue\nwith the Windows install normally.\n![select-driver](select_driver.png)\n\n#### Install graphics drivers (Windows Guests Only)\nOnce Windows is fully installed, we will need to install\nthe graphics drivers. In File Explorer, go to the drive\nlabeled as **virtio-win-x.x.xxx** and run\n**virtio-win-guest-tools.exe**\n\n## Conclusion\nYou have now successfully created a virtual machine\nusing QEMU/Virt Manager. This VM will have near-native\nperformance with very little emulation overhead. Here\nis a screenshot of the VM with all of the necessary drivers.\n![windows-desktop](windows_desktop.png)","srcMarkdownNoYaml":"\n\n![](qemu.png)\n\n## Introduction\nSometimes, we find ourselves needing to use a different operating system\nto accomplish a certain task. For example, you are using Linux and you\nneed to run a program designed for Windows, and the program cannot\nrun under a compatibility layer like WINE. Previously on Linux,\nfor these kinds of scenarios, Virtualbox was used to create virtual\nmachines to run these programs, and while Virtualbox is a great program,\nit's quite slow in comparison to QEMU with KVM. In my experience, QEMU\nwith KVM acceleration has given me the best performance compared to other\nsoftware. This guide will show you in detail how to use QEMU along with\nVirt Manager to make virtual machines with near-native performance.\n\n## Prerequisites\nYou must have virtualization enabled in your BIOS. This is usually enabled\nby default but if you want to check, you can run the following command:\n```bash\nlscpu | grep Virtualization\n```\n\nIf you have an Intel CPU, it should say `VT-x` and on an AMD CPU, it\nshould say `AMD-V`. If you don't see anything. You will have to go into\nyour BIOS and enable it yourself. If you have an Intel motherboard, you\nshould enable `VT-x` and if you have an AMD motherboard, you should\nenable `AMD-V`. Consult your PC manufacturer or motherboard manual for\nfurther instructions.\n\n\n## Installation\nIt is time to install QEMU along with Virt Manager onto your system. Install\nthe following packages using your distribution's package manager.\n\nArch Linux\n```bash\nsudo pacman -S qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat libguestfs\n```\n\nDebian/Ubuntu\n```bash\nsudo apt install qemu-system virt-manager libvirt-daemon dnsmasq vde2 bridge-utils netcat-openbsd libguestfs-tools\n```\n\nFedora\n```bash\nsudo dnf install @virtualization\n```\n\n#### Non-systemd distributions\nIf you are using a distribution that does not use systemd, you must\ninstall the libvirt daemon package that corresponds to your init system.\nFor example, on an Artix Linux system with OpenRC, you must install\n`libvirt-openrc`.\n\n## Modify configuration files\nBefore we start creating virtual machines, we need to make sure that\nthe user has sufficient permissions to use KVM. To do this, we first\nneed to uncomment the following lines in `/etc/libvirt/libvirtd.conf`\n\n```bash\nunix_sock_group = \"libvirt\"\nunix_sock_ro_perms = \"0777\"\nunix_sock_rw_perms = \"0770\"\n```\n\nAfter making those changes, your user must be part of the libvirt group,\nrun the following command to make the changes:\n\n```bash\nsudo usermod -aG libvirt $(whoami)\n```\n\nIf you are using a Debian/Ubuntu based distribution, you may need to add\nyour user to the kvm group: run the following command to make the changes:\n\n```bash\nsudo usermod -aG kvm $(whoami)\n```\n\nNow we must enable the libvirtd service itself. On most distributions,\nyou can enable the service on startup using systemd:\n\n```bash\nsudo systemctl enable libvirtd\n```\n\nIf you are using a distribution that does not use systemd, you must enable\nthe service using your distribution's init system.\n\nAt this point, you must restart your system for the changes to be applied.\n\n## Setting up the virtual machine\nOpen Virt Manager and wait for QEMU/KVM to connect. Before we\nbegin creating a virtual machine, we first must make sure that the\nvirtual network adapter is working. To check this, click on **QEMU/KVM**,\nthen go to **Edit** -> **Connection Details** -> **Virtual Networks** and\nclick the play button to enable the virtual network adapter. Also make sure\nto check **On Boot** to ensure that the adapter is always started.\n\nNow we can begin the process of creating a virtual machine. Go to\n**File** -> **New Virtual Machine**. Make sure local install media\nis selected and click forward.\n\nYou will then be prompted to select an ISO image. Go to **Browse** ->\n**Browse Local** and locate your ISO image. Most of the time, it will\nautomatically detect the OS. If it doesn't, you will have to manually\nselect the OS.\n\nAfter that, you'll be asked to allocate RAM and CPUs to the VM.\nThe general rule for allocating RAM is to never go above 50% of your\ntotal RAM (Ex: if you have 16GB of RAM, you can allocate at most 8GB).\nIgnore the number of CPUs for now, we will configure that later.\n\nThe next step is to configure your storage. You can configure this\nhowever you want.\n\nNow you will get a message to confirm the VM settings. We are not\ndone with the configuration just yet. We are going to change some\nof the VM settings. Make sure to check\n**Customize configuration before install** and click **Finish**.\n\n## Customizing virtual machine settings\n\n#### Changing firmware to UEFI\nWe will start with changing the firmware settings. I personally like\nto set the firmware to UEFI because every modern computer uses UEFI\nand many operating systems expect UEFI. This change is optional\nunless your guest OS requires UEFI.\n\n#### Modifying CPU topology\nThe next setting we will change is the CPU. The reason we didn't\nallocate CPU cores ahead of time is because for some reason,\nVirt Manager allocates sockets instead of cores and threads.\nIn other words, the guest OS will think there are multiple physical\nCPUs. We will modify the topology to allocate cores and threads\ninstead. Similar to allocating RAM, do not go above 50% of your total\nCPU threads. To view the total threads allocated, look at\n**vCPU allocation**\n\n#### Changing disk interface\nNext we will change the disk interface. The **VirtIO** interface\nis recommended as it is a paravirtualized interface, which\nmakes it faster compared to using the emulated SATA interface.\n\n#### Selecting graphics adapter\nThere are two options for the graphics adapter. You can use\neither Virtio or QXL. Virtio has 3D acceleration and QXL only\nhas 2D acceleration. You can use the driver that works\nbest with your use case.\n\n#### Adding a second CD/DVD Drive (Windows Guests Only)\nWindows does not come with VirtIO drivers. Because of this,\nwe need to install the drivers manually during Windows setup.\nThe virtio drivers for Windows can be found\n[here](https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md).\nTo add a second CD/DVD drive, go to **Add Hardware** -> **Storage**\n-> change device type to **CDROM device** -> click **Manage**\nand locate the VirtIO drivers.\n\n#### Adding a TPM Module (Windows 11 Guests Only)\nWindows 11 requires a TPM Module in order to be installed.\nThankfully, you can emulate a TPM using `swtpm`. Use\nyour distribution's package manager to install `swtpm`.\nTo add the TPM to the VM, go to **Add Hardware** ->\n**TPM** -> and use the default settings.\n\n## Installing the operating system\nNow you can click **Begin Installation** and from here,\ninstall the OS as you would on a physical computer. I'm\ninstalling Windows Server 2022.\n![windows-setup](windows_setup.png)\n\n#### Installing VirtIO drivers (Windows Guests Only)\nEarlier I mentioned that we needed to add a second CD/DVD\ndrive for the VirtIO drivers. You may have noticed that\nWindows didn't detect the disk. This is where the second\nCD/DVD drive comes in. To install the drivers, go to\n**Load Driver** -> **Ok** and you will get a list of\navailable drivers. Install the driver that cooresponds to\nyour version of Windows. From here you can continue\nwith the Windows install normally.\n![select-driver](select_driver.png)\n\n#### Install graphics drivers (Windows Guests Only)\nOnce Windows is fully installed, we will need to install\nthe graphics drivers. In File Explorer, go to the drive\nlabeled as **virtio-win-x.x.xxx** and run\n**virtio-win-guest-tools.exe**\n\n## Conclusion\nYou have now successfully created a virtual machine\nusing QEMU/Virt Manager. This VM will have near-native\nperformance with very little emulation overhead. Here\nis a screenshot of the VM with all of the necessary drivers.\n![windows-desktop](windows_desktop.png)"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.21","theme":["slate"],"title":"How To Setup QEMU/Virt Manager On Linux","author":"Santiago Torres","date":"2025-04-07","title-block-banner":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}